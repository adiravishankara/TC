%% Extended Kalman filter example
clear;
clc;

%% Parameters
dt = 0.1;           % time step
tf = 13;            % final time
T = 0:dt:tf;        % time vector
Len = length(T);    % length of the vector
% Saveing vectors
y_store = zeros(3,Len);       % measurment vector 
x_store = zeros(3,Len);       % actual state vector generated
xh_store = zeros(3,Len);      % state vector generated by kalman filter
P_store = zeros(3,3,Len);     % covariance vector
K_store = zeros(3,Len);       % Kalman filter gain vector

% Actual initial State
x0 = 1;
% Prior information
xh0 = 0;             % initial state estimation 
P0 = 1;        % initial covariance
% Discrete motion model
Ad = [1 dt 0 ;...
      0 1  0 ;...
      0 0  1];
% Disturbance covariance
R = 0.01 * eye(2);
% Measurement model defined below
Q = 0.0001;
% Simulation Initializations
n = size(R,1);
m = size(Q,1);
x_store(:,1) = x0;
xh_store(:,1) = xh0;
P_store(:,:,1) = P0;

%% Main loop
for t = 2:Len
    %% Get data
    x_old = x_store(:,t-1);
    xh_old = xh_store(:,t-1);
    P_old = P_store(:,:,t-1);
    %% Simulation resampling the dynamis and measurement of actual system
    % Select a motion disturbance
    w = sqrt(R) * randn(3,1);       % Select a motion disturbance   
    x_new = Ad * x_old + w;                 % Update state
    % Take measurement
    v = sqrt(Q) * randn(1);         % Select a motion disturbance
    y = sqrt(x_new(1)^2 + x_new(3)^2) + v;  % Determine measurement

    %% Extended Kalman Filter Estimation
    % Prediction update
    xh_bar = Ad * xh_old;
    P_bar = Ad * P_old * Ad' + R;
    % Linearization
    Ht = [xh_bar(1)/(sqrt(xh_bar(1)^2 + xh_bar(3)^2)),...
          0,...
          xh_bar(3)/(sqrt(xh_bar(1)^2 + xh_bar(3)^2))];
    % Measurement model  
    h = sqrt(xh_bar(1)^2 + xh_bar(3)^2);  
    % Measurement update
    K = P_bar * Ht' * inv(Ht * P_bar * Ht' + Q);
    xh_new = xh_bar + K * (y - h);
    P_new = (eye(3) - K * Ht) * P_bar;

    %% Store results
    x_store(:,t) = x_new;
    xh_store(:,t) = xh_new;
    P_store(:,:,t) = P_new;
    K_store(:,t) = K;
    y_store(:,t) = y;
end

%% Plot results
figure(1); hold on;
plot( x_store(1,:), x_store(3,:), 'ro--')
plot(xh_store(1,:),xh_store(3,:), 'bx--')
plot(0,0,'bx', 'MarkerSize', 6, 'LineWidth', 2)
plot([20 -1],[0 0],'b--')
title('True state and belief')
legend('Actual','Estimated','origin')
axis equal
axis([-1 20 -10 10])